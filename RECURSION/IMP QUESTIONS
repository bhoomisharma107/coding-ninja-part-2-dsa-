Sum of Array
Send Feedback
Given an array of length N, you need to find and return the sum of all elements of the array.
Do this recursively.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Output Format :
Sum
===================================================================================================================================================================================
CODE 1:
int sum(int input[], int n) {
  /* Don't write main().
     Don't read input, it is passed as function argument.
     Return output and don't print it.
     Taking input and printing output is handled automatically.
  */
    if(n<=0)//this is a base case if we encountered n as 0 simply give zero
        return 0;
    else
        return (input[0]+sum(input+1,n-1));//recursive call by breaking array into two parts  by end we break it}
=========================================================================================================================================================================
PROBLEM 2:
Check Number
Send Feedback
Given an array of length N and an integer x, you need to find if x is present in the array or not. Return true or false.
Do this recursively.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Line 3 : Integer x
Output Format :
'true' or 'false'
============================================================================================================================================================================
CODE 2:

bool checkNumber(int input[], int size, int x) {
  /* Don't write main().
     Don't read input, it is passed as function argument.
     Return output and don't print it.
     Taking input and printing output is handled automatically.
  */
  /*  
    if(size<=0)//base case
        return false;
        else
        {if(input[0]==x)
            return true;
         else
             checkNumber(input+1,size-1,x);
            
        }
        OR
        
        ===========================================================================================================================================================
        
if(size<=0)
    return false;
else
{if(input[size-1]==x)
    return true;
 else
 {
     checkNumber(input,size-1,x);
 }
}}
     =========================================================================================================================================================================
     QUESTION 3:
     
 First Index of Number
Send Feedback
Given an array of length N and an integer x, you need to find and return the first index of integer x present in the array. Return -1 if it is not present in the array.
First index means, the index of first occurrence of x in the input array.
Do this recursively. Indexing in the array starts from 0.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Line 3 : Integer x
Output Format :
first index or -1
========================================================================================================================================================================
ANSWER 3:
int firstIndex(int input[], int size, int x) {
  /* Don't write main().
     Don't read input, it is passed as function argument.
     Return output and don't print it.
     Taking input and printing output is handled automatically.
  */
    if(size==0)//base case if size is zero then no index so return 0
        return -1;
    else
    {
        if(input[0]==x)//check is first element is x then return 0 e
            return 0;
        else
        {
            int ans=firstIndex(input+1,size-1,x);//recursive call
           if(ans!=-1)//if its not found then ans is -1 so no addition of index
            
                return ans+1;//we have skiped input0 so that ndexed is plused as+1
            
            
        }
    }

}

==============================================================================================================================================================================
PROBLEM 4:
Last Index of Number
Send Feedback
Given an array of length N and an integer x, you need to find and return the last index of integer x present in the array. Return -1 if it is not present in the array.
Last index means - if x is present multiple times in the array, return the index at which x comes last in the array.
You should start traversing your array from 0, not from (N - 1).
Do this recursively. Indexing in the array starts from 0.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Line 3 : Integer x
Output Format :
last index or -1
====================================================================================================================================================================
CODE 4:
int lastIndex(int input[], int size, int x) {
  /* Don't write main().
     Don't read input, it is passed as function argument.
     Return output and don't print it.
     Taking input and printing output is handled automatically.
  */
if(size==0)//base case
    return -1;
    else
    {
        if(input[size-1]==x)//since last index is required so check from last
            return size-1;
        else
        {
        int ans=lastIndex(input,size-1,x);//recursive calll from starting to end
            if(ans!=-1)
            return ans;//here directly return te ans since we havent broke the array from starting in that case we add 1
            
    }
}}
===========================================================================================================================================================================
PROBLEM 5
All Indices of Number
Send Feedback
Given an array of length N and an integer x, you need to find all the indexes where x is present in the input array. Save all the indexes in an array (in increasing order).
Do this recursively. Indexing in the array starts from 0.
Input Format :
Line 1 : An Integer N i.e. size of array
Line 2 : N integers which are elements of the array, separated by spaces
Line 3 : Integer x
Output Format :
indexes where x is present in the array (separated by space)
Constraint
=============================================================================================================================================================================
CODE 5
int allIndexes(int input[], int size, int x, int output[]) {
  /* Don't write main().
     Don't read input, it is passed as function argument.
     Save all the indexes in the output array passed and return the size of output array.
     Taking input and printing output is handled automatically.
  */
if(size==0)//this is a base case if array ka size is zero it means it will return 0 not -1 where it is mentioned to return -1 there only we return -1
    return 0;
    //breaking the problem from end
int ans=allIndexes(input,size-1,x,output);//recursive call made it will give the output array
    if(input[size-1]==x)//check for the last element if it is eqal to the given element add to the output array
    {
        output[ans]=size-1;//adding the index to the output array of last element
        ans++;//incrementing output arry
            
    }
    return ans;}//returning the final answer
    ========================================================================================================================================================================
        
