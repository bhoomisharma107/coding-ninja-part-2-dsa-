Replace pi (recursive)
Send Feedback
Given a string, compute recursively a new string where all appearances of "pi" have been replaced by "3.14".
Constraints :
1 <= |S| <= 50
where |S| represents the length of string S. 
Sample Input 1 :
xpix
==============================================================================================================================================================================
CODE 2:
// Change in the given string itself. So no need to return or print anything
#include<cstring>
void helper(char input[],int start)//CREATED THE HELPER FUNCTION WITH PARAMETER START
{
    if(input[start]=='\0' || input[start+1]=='\0')//BASE CASE IF STING IS NULL OR HAVE ONE CHARACTER IN IT RETURN
    return;
    else
    helper(input,start+1);//RECURSIVE CALL
    if(input[start]=='p' && input[start+1]=='i')//IF ENCOUNTERED THAT START AND SECOND ELEMENT IS P AND I SO  SHIFTE LEMENTS
    {
        for(int i=strlen(input);i>=start+2;i--)//LOOP FOR SHIFTING ELEMENTS 
        {
            input[i+2]=input[i];
        }
        input[start] = '3';
        input[start + 1] = '.';
        input[start + 2] = '1';
        input[start + 3] = '4';
    }
}
void replacePi(char input[]) {
	// Write your code here
    helper(input,0);
    
    
    
    
    
}
===================================================================================================================================================================================
QUESTION 2:
ower of Hanoi
Send Feedback
Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move all disks from source rod to destination rod using third rod (say auxiliary). The rules are :
1) Only one disk can be moved at a time.
2) A disk can be moved only if it is on the top of a rod.
3) No disk can be placed on the top of a smaller disk.
Print the steps required to move n disks from source rod to destination rod.
Source Rod is named as 'a', auxiliary rod as 'b' and destination rod as 'c'.
Input Format :
Integer n
==============================================================================================================================================================================
CODE 2:
void towerOfHanoi(int n, char source, char auxiliary, char destination) {
    // Write your code here
    
    if(n>0)
    {
        towerOfHanoi(n-1,source,destination,auxiliary);
        cout<<"a"<<" "<<"c"<<endl;
        towerOfHanoi(n-1,auxiliary,source,destination);

    }

}

==============================================================================================================================================================================
DESCRIPTION OF TOWER OF HANOI
ower of Hanoi, is a mathematical puzzle which consists of three towers (pegs) and more than one rings is as depicted −

Tower Of Hanoi
These rings are of different sizes and stacked upon in an ascending order, i.e. the smaller one sits over the larger one. There are other variations of the puzzle where the number of disks increase, but the tower count remains the same.

Rules
The mission is to move all the disks to some another tower without violating the sequence of arrangement. A few rules to be followed for Tower of Hanoi are −

Only one disk can be moved among the towers at any given time.
Only the "top" disk can be removed.
No large disk can sit over a small disk.
Following is an animated representation of solving a Tower of Hanoi puzzle with three disks.

Tower Of Hanoi
Tower of Hanoi puzzle with n disks can be solved in minimum 2n−1 steps. This presentation shows that a puzzle with 3 disks has taken 23 - 1 = 7 steps.

Algorithm
To write an algorithm for Tower of Hanoi, first we need to learn how to solve this problem with lesser amount of disks, say → 1 or 2. We mark three towers with name, source, destination and aux (only to help moving the disks). If we have only one disk, then it can easily be moved from source to destination peg.

If we have 2 disks −

First, we move the smaller (top) disk to aux peg.
Then, we move the larger (bottom) disk to destination peg.
And finally, we move the smaller disk from aux to destination peg.
Tower Of Hanoi with Two Disks
So now, we are in a position to design an algorithm for Tower of Hanoi with more than two disks. We divide the stack of disks in two parts. The largest disk (nth disk) is in one part and all other (n-1) disks are in the second part.

Our ultimate aim is to move disk n from source to destination and then put all other (n1) disks onto it. We can imagine to apply the same in a recursive way for all given set of disks.

The steps to follow are −

Step 1 − Move n-1 disks from source to aux
Step 2 − Move nth disk from source to dest
Step 3 − Move n-1 disks from aux to dest
A recursive algorithm for Tower of Hanoi can be d
===============================================================================================================================================================================
