Code : Find a node
Send Feedback
For a given Binary Tree of type integer and a number X, find whether a node exists in the tree with data X or not.
 Input Format:
The first line of each test case contains elements of the first tree in the level order form. The line consists of values of nodes separated by a single space. 
In case a node is null, we take -1 in its place.

The second line of each test case contains the node value you have to find.


For example, the input for the tree depicted in the below image would be:
============================================================================================================================================================================
CODE 1:

************************************************************

    Following is the Binary Tree node structure

    template <typename T>
    class BinaryTreeNode
    {
        public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data)
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/

bool isNodePresent(BinaryTreeNode<int> *root, int x) {
    // Write your code here
    if(root==NULL)
        return false;
    if(root->data==x)
        return true;
    bool ans=isNodePresent(root->left,x);
    bool ans2=isNodePresent(root->right,x);
    if(ans==true || ans2==true)
    {
        return true;
    }
    return false;
}

================================================================================================================================================================================
Code : Height of Binary Tree
Send Feedback
For a given Binary Tree of integers, find and return the height of the tree.
Example:
                        10
                      /      \
                    20      30
                   /    \
                 40    50

Height of the given tree is 3. 

Height is defined as the total number of nodes along the longest path from the root to any of the leaf node.
 Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data
exist for root, it will not be a part of the node data.
CODE 2:
=====================================================================================================================================================================

int height(BinaryTreeNode<int>* root) {
    // Write our code here
    if(root==NULL)
        return 0;
   int leftheight=height(root->left);
    int rightheight=height(root->right);
    int height=max(leftheight,rightheight);
    return height+1;
}
======================================================================================================================================
QUESTION 3:
Code : Mirror
Send Feedback
For a given Binary Tree of type integer, update it with its corresponding mirror image.
Example:
Alt text

Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
Output Format:
The only line of output prints the mirrored tree in a level-wise order. 
Each level will be printed on a new line. Elements printed at each level will be separated by a single line.
Note:
You are not required to print anything explicitly. It has already been taken care of.
Constraints:
==================================================================================================================================================================
CODE 3:

void mirrorBinaryTree(BinaryTreeNode<int>* root) {
    // Write your code here
    /*if(root==NULL || root->left==NULL || root->right==NULL)
        return;*/
    if(root==NULL)//if root hi null huii rteurn then
        return;
    mirrorBinaryTree(root->left);//recursive call on left tree
    mirrorBinaryTree(root->right);//recursive call on right tree
   BinaryTreeNode<int>*p=root->left;//created a nodde jisme left ki value lleiy ha
    root->left=root->right;//left me right ki value fdalo
    root->right=p;//right me left ki dal do swap ho jayegi
    return;
    
}


