QUESTION 1:
=================================================================================================================================================================================
Preorder Binary Tree
Send Feedback
You are given the root node of a binary tree.Print its preorder traversal.
Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data
exist for root, it will not be a part of the node data.
Output Format:
The only line of output prints the preorder traversal of the given binary tree.
Constraints:
1 <= N <= 10^6
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
=================================================================================================================================================================================
QUESTION 2:

void preOrder(BinaryTreeNode<int> *root) {
	// Write your code here
    if(root==NULL)
        return;
    cout<<root->data<<" ";
    preOrder(root->left);
    preOrder(root->right);
}
=================================================================================================================================================================================
QUESTION 2:
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CODE 2:
Postorder Binary Tree
Send Feedback
For a given Binary Tree of integers, print the post-order traversal.
Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data
exist for root, it will not be a part of the node data.
Output Format:
The only line of output prints the post-order traversal of the given binary tree.
Constraints:
1 <= N <= 10^6
Where N is the total number of nodes in the binary tree.

Time Limit: 1 sec
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ANSWER 2:
	Following is the Binary Tree Node class structure

	template <typename T>
	class BinaryTreeNode {
    	public : 
    	T data;
    	BinaryTreeNode<T> *left;
    	BinaryTreeNode<T> *right;

    	BinaryTreeNode(T data) {
        	this -> data = data;
        	left = NULL;
        	right = NULL;
    	}
	};

***********************************************************/

void postOrder(BinaryTreeNode<int> *root) {
	// Write your code here
    if(root==NULL)
        return;
    postOrder(root->left);
    postOrder(root->right);
    cout<<root->data<<" ";
}
================================================================================================================================================================================
code 3:
Sum Of Nodes
Send Feedback
For a given Binary Tree of integers, find and return the sum of all the nodes data.
Example:
                        10
                      /      \
                    20      30
                   /    \
                 40    50

When we sum up all the nodes data together, [10, 20, 30, 40 50] we get 150. Hence, the output will be 150.
 Input Format:
The first and the only line of input will contain the nodes data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
Output Format:
==================================================================================================================================================================================
ANSWER 3:

int getSum(BinaryTreeNode<int>* root) {
    // Write your code here
    int sum=0;
    if(root==NULL)
        return 0;
    int lsum=getSum(root->left);
    int rsum=getSum(root->right);
    sum=lsum+rsum+root->data;
    return sum;
}================================================================================================================================================================================
QUESTION 4:
Nodes without sibling
Send Feedback
For a given Binary Tree of type integer, print all the nodes without any siblings.
Input Format:
The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
Output Format:
The only line of output prints the node data in a top to down fashion with reference to the root. 
Node data in the left subtree will be printed first and then the right subtree.
A single space will separate them all.
==========================================================================2==============================================================================================
CODE 2:
***********************************************************

    Following is the Binary Tree node structure

    template <typename T>
    class BinaryTreeNode
    {
        public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data)
        {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

************************************************************/

void printNodesWithoutSibling(BinaryTreeNode<int> *root) {
    // Write your code here
    if(root==NULL)//edge case
        return;
     if(root->left!=NULL && root->right!=NULL)//agr dono e se koi null ni h phir dono pr cll kr fo
    {
        printNodesWithoutSibling(root->left);
        printNodesWithoutSibling(root->right);
    }
    
    else if(root->left!=NULL)//if node ka left cjild hi h to print kr diya phir akiyon ko cal kr diya
    {
        cout<<root->left->data<<" ";
        printNodesWithoutSibling(root->left);
    }
    else if(root->right!=NULL)//agr right child hi ha bs then 
    {
        cout<<root->right->data<<" ";//print right ka data
        printNodesWithoutSibling(root->right);
    }
   
    
    
}
============================================================================================================================================================================
